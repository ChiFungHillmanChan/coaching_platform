{
  "title": "Integrate Admin Panel UI (real data) into existing React + Tailwind project",
  "assistant": "claude-code",
  "goals": [
    "Add an /admin panel with Dashboard, Users, Newsletter pages using the exact UI layout and styling from the reference mock.",
    "Use real project data via adapter functions that target existing backend endpoints.",
    "Keep the change surface minimal and idempotent."
  ],
  "assumptions": [
    "Project is React + TypeScript and uses TailwindCSS.",
    "There is a backend exposing metrics, users, and newsletter endpoints; paths may differ.",
    "React Router is likely in use; otherwise the consumer will mount the component directly."
  ],
  "instructions": [
    "Detect React Router configuration. If the app has routing, add a route '/admin' that lazy-loads the AdminPanel. If not, export AdminPanel so it can be mounted manually.",
    "Ensure Tailwind is configured with darkMode: 'class' and that content globs include 'src/admin/**/*'. Do not overwrite global styles except to add necessary globs.",
    "Install dependencies if missing: recharts and lucide-react.",
    "Preserve existing project structure. Create files under 'src/admin/'.",
    "Use the provided service adapter (adminApi.ts) to call the project's real endpoints. If endpoint paths differ, adjust only the adapter.",
    "Do not include any mock data in UI components. All data must come from the adapter calls.",
    "Maintain exact UI spacing, colors, and graph styling as the reference mock (rounded-2xl, shadow-sm cards; bg gray-50/900; cards white/gray-800; borders gray-200/700).",
    "Avoid adding global CSS frameworks other than Tailwind; rely on utility classes only.",
    "Keep all code TypeScript strict and warning-free."
  ],
  "dependencies": {
    "addIfMissing": [
      "recharts",
      "lucide-react"
    ]
  },
  "edits": [
    {
      "ifFileExists": [
        "src/App.tsx",
        "src/router.tsx",
        "src/routes.tsx"
      ],
      "snippet": "// Add an /admin route that lazy-loads the AdminPanel\n// Example (adjust to your router):\n// const Admin = React.lazy(() => import('./admin/components/AdminPanel'));\n// <Route path=\"/admin\" element={<Suspense fallback={null}><Admin /></Suspense>} />\n"
    },
    {
      "file": "tailwind.config.js",
      "ensure": [
        "darkMode: 'class'",
        "content includes './src/admin/**/*.{ts,tsx,js,jsx}'"
      ]
    }
  ],
  "files": [
    {
      "path": "src/admin/components/AdminPanel.tsx",
      "action": "write",
      "content": "import React, { useMemo, useState, useEffect } from \"react\";\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid, Legend } from \"recharts\";\nimport { Search, Sun, Moon, LogOut, Mail, Users, BarChart3 } from \"lucide-react\";\nimport { getAdminMe, getMetrics, getUsers, addUser, toggleUserSubscription, sendNewsletterTest, sendNewsletter } from \"../services/adminApi\";\n\n// ---- Theme helpers ---------------------------------------------------------\nconst useTheme = () => {\n  const [dark, setDark] = useState(false);\n  useEffect(() => {\n    const root = document.documentElement;\n    if (dark) root.classList.add(\"dark\");\n    else root.classList.remove(\"dark\");\n  }, [dark]);\n  return { dark, setDark };\n};\n\n// ---- Header ---------------------------------------------------------------\nconst Header: React.FC<{\n  adminEmail: string;\n  currentPage: string;\n  onNavigate: (page: PageKey) => void;\n  dark: boolean;\n  setDark: (v: boolean) => void;\n}> = ({ adminEmail, currentPage, onNavigate, dark, setDark }) => {\n  const tabs: { key: PageKey; label: string }[] = [\n    { key: \"dashboard\", label: \"Dashboard\" },\n    { key: \"users\", label: \"Users\" },\n    { key: \"newsletter\", label: \"Newsletter\" },\n  ];\n  return (\n    <header className=\"sticky top-0 z-40 w-full border-b border-gray-200 dark:border-gray-800 bg-gray-50/80 dark:bg-gray-900/80 backdrop-blur\">\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex h-16 items-center justify-between\">\n          <div className=\"flex items-center gap-6\">\n            <span className=\"font-semibold text-gray-900 dark:text-gray-100\">AI Coaching Admin</span>\n            <nav className=\"hidden md:flex items-center gap-2\">\n              {tabs.map((t) => (\n                <button\n                  key={t.key}\n                  onClick={() => onNavigate(t.key)}\n                  className={`px-3 py-1.5 rounded-lg text-sm transition-colors ${\n                    currentPage === t.key\n                      ? \"bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 border border-gray-200 dark:border-gray-700\"\n                      : \"text-gray-600 dark:text-gray-300 hover:bg-white/60 dark:hover:bg-gray-800/60\"\n                  }`}\n                >\n                  {t.label}\n                </button>\n              ))}\n            </nav>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"hidden sm:flex items-center text-sm text-gray-600 dark:text-gray-300 mr-2\">\n              <Mail className=\"h-4 w-4 mr-1\" /> {adminEmail}\n            </div>\n            <Button variant=\"ghost\" onClick={() => setDark(!dark)} className=\"flex items-center gap-2\">\n              {dark ? <Sun className=\"h-4 w-4\" /> : <Moon className=\"h-4 w-4\" />}\n              <span className=\"hidden sm:inline\">{dark ? \"Light\" : \"Dark\"}</span>\n            </Button>\n            <Button variant=\"outline\" className=\"flex items-center gap-2\">\n              <LogOut className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Logout</span>\n            </Button>\n          </div>\n        </div>\n        {/* mobile tabs */}\n        <nav className=\"md:hidden flex items-center gap-2 pb-3\">\n          {tabs.map((t) => (\n            <button\n              key={t.key}\n              onClick={() => onNavigate(t.key)}\n              className={`px-3 py-1.5 rounded-lg text-sm transition-colors ${\n                currentPage === t.key\n                  ? \"bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 border border-gray-200 dark:border-gray-700\"\n                  : \"text-gray-600 dark:text-gray-300 hover:bg-white/60 dark:hover:bg-gray-800/60\"\n              }`}\n            >\n              {t.label}\n            </button>\n          ))}\n        </nav>\n      </div>\n    </header>\n  );\n};\n\n// ---- Small UI primitives (cards, buttons, inputs) -------------------------\nconst Card: React.FC<React.PropsWithChildren<{ className?: string }>> = ({ className = \"\", children }) => (\n  <div className={`rounded-2xl shadow-sm border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 ${className}`}>{children}</div>\n);\n\nconst CardHeader: React.FC<React.PropsWithChildren<{ title?: string; icon?: React.ReactNode; action?: React.ReactNode }>> = ({ title, icon, action, children }) => (\n  <div className=\"flex items-center justify-between p-4 sm:p-5 border-b border-gray-100 dark:border-gray-700\">\n    <div className=\"flex items-center gap-2 text-gray-900 dark:text-gray-100\">\n      {icon && <span className=\"h-5 w-5\">{icon}</span>}\n      {title && <h3 className=\"font-semibold tracking-tight\">{title}</h3>}\n    </div>\n    {action && <div>{action}</div>}\n    {children}\n  </div>\n);\n\nconst CardContent: React.FC<React.PropsWithChildren<{ className?: string }>> = ({ className = \"\", children }) => (\n  <div className={`p-4 sm:p-6 ${className}`}>{children}</div>\n);\n\nconst Button: React.FC<React.PropsWithChildren<{ onClick?: () => void; variant?: \"solid\" | \"ghost\" | \"outline\"; size?: \"sm\" | \"md\"; className?: string; disabled?: boolean }>> = ({ onClick, variant = \"solid\", size = \"md\", className = \"\", children, disabled }) => {\n  const base = \"rounded-xl focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 dark:focus:ring-gray-600 disabled:opacity-50\";\n  const variants = {\n    solid: \"bg-gray-900 text-white dark:bg-gray-100 dark:text-gray-900 hover:opacity-90\",\n    ghost: \"bg-transparent text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700\",\n    outline: \"border border-gray-300 dark:border-gray-600 text-gray-800 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700\",\n  } as const;\n  const sizes = { sm: \"px-3 py-1.5 text-sm\", md: \"px-4 py-2\" } as const;\n  return (\n    <button onClick={onClick} disabled={disabled} className={`${base} ${variants[variant]} ${sizes[size]} ${className}`}>{children}</button>\n  );\n};\n\nconst Input: React.FC<{\n  value: string;\n  onChange: (v: string) => void;\n  placeholder?: string;\n  type?: string;\n}> = ({ value, onChange, placeholder, type = \"text\" }) => (\n  <input\n    value={value}\n    onChange={(e) => onChange(e.target.value)}\n    placeholder={placeholder}\n    type={type}\n    className=\"w-full rounded-xl border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 px-3 py-2 text-sm text-gray-900 dark:text-gray-100 placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-400 dark:focus:ring-gray-600\"\n  />\n);\n\nconst Textarea: React.FC<{\n  value: string;\n  onChange: (v: string) => void;\n  rows?: number;\n  placeholder?: string;\n}> = ({ value, onChange, rows = 8, placeholder }) => (\n  <textarea\n    value={value}\n    onChange={(e) => onChange(e.target.value)}\n    rows={rows}\n    placeholder={placeholder}\n    className=\"w-full rounded-xl border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 px-3 py-2 text-sm text-gray-900 dark:text-gray-100 placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-400 dark:focus:ring-gray-600\"\n  />\n);\n\n// ---- Dashboard (real data) ------------------------------------------------\ntype MonthlyPoint = { month: string; total: number; newlyAdded: number };\n\nconst Dashboard: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [series, setSeries] = useState<MonthlyPoint[]>([]);\n\n  useEffect(() => {\n    let alive = true;\n    setLoading(true);\n    getMetrics().then((res) => {\n      if (!alive) return;\n      setSeries(res.monthly || []);\n      setError(null);\n    }).catch((e) => {\n      setError(e?.message || \"Failed to load metrics\");\n    }).finally(() => setLoading(false));\n    return () => { alive = false; };\n  }, []);\n\n  const current = series[series.length - 1]?.total ?? 0;\n  const previous = series[series.length - 2]?.total ?? 0;\n  const mom = previous === 0 ? 0 : ((current - previous) / previous) * 100;\n  const newThisMonth = series[series.length - 1]?.newlyAdded ?? 0;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardHeader title=\"Total Subscribers\" icon={<Users className=\"h-5 w-5\" />} />\n          <CardContent>\n            {loading ? <SkeletonLine /> : <>\n              <div className=\"text-3xl font-semibold text-gray-900 dark:text-gray-100\">{current}</div>\n              <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">as of this month</p>\n            </>}\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader title=\"MoM Change\" icon={<BarChart3 className=\"h-5 w-5\" />} />\n          <CardContent>\n            {loading ? <SkeletonLine /> : <>\n              <div className={`text-3xl font-semibold ${mom >= 0 ? \"text-emerald-600\" : \"text-rose-600\"}`}>{mom.toFixed(1)}%</div>\n              <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">compared to previous month</p>\n            </>}\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader title=\"New Subs (This Month)\" icon={<Users className=\"h-5 w-5\" />} />\n          <CardContent>\n            {loading ? <SkeletonLine /> : <>\n              <div className=\"text-3xl font-semibold text-gray-900 dark:text-gray-100\">{newThisMonth}</div>\n              <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">joined this month</p>\n            </>}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n        <Card>\n          <CardHeader title=\"Total Subscribers by Month\" />\n          <CardContent className=\"h-72\">\n            {loading ? <SkeletonChart /> : (\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={series} margin={{ top: 10, right: 20, left: 0, bottom: 0 }}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"currentColor\" className=\"text-gray-200 dark:text-gray-700\" />\n                  <XAxis dataKey=\"month\" tick={{ fontSize: 12 }} stroke=\"currentColor\" className=\"text-gray-500 dark:text-gray-400\" />\n                  <YAxis tick={{ fontSize: 12 }} stroke=\"currentColor\" className=\"text-gray-500 dark:text-gray-400\" />\n                  <Tooltip contentStyle={{ borderRadius: 12 }} />\n                  <Legend />\n                  <Line type=\"monotone\" dataKey=\"total\" strokeWidth={2} dot={false} />\n                </LineChart>\n              </ResponsiveContainer>\n            )}\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader title=\"New Subscriptions per Month\" />\n          <CardContent className=\"h-72\">\n            {loading ? <SkeletonChart /> : (\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={series} margin={{ top: 10, right: 20, left: 0, bottom: 0 }}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"currentColor\" className=\"text-gray-200 dark:text-gray-700\" />\n                  <XAxis dataKey=\"month\" tick={{ fontSize: 12 }} stroke=\"currentColor\" className=\"text-gray-500 dark:text-gray-400\" />\n                  <YAxis tick={{ fontSize: 12 }} stroke=\"currentColor\" className=\"text-gray-500 dark:text-gray-400\" />\n                  <Tooltip contentStyle={{ borderRadius: 12 }} />\n                  <Legend />\n                  <Line type=\"monotone\" dataKey=\"newlyAdded\" name=\"new\" strokeWidth={2} dot={false} />\n                </LineChart>\n              </ResponsiveContainer>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n      {error && <div className=\"text-sm text-rose-600 dark:text-rose-400\">{error}</div>}\n    </div>\n  );\n};\n\n// ---- Users (real data) ----------------------------------------------------\ntype UserRow = { id: string; email: string; status: \"active\" | \"canceled\" };\n\nconst UsersPage: React.FC = () => {\n  const [query, setQuery] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [items, setItems] = useState<UserRow[]>([]);\n  const [total, setTotal] = useState(0);\n  const pageSize = 10;\n\n  useEffect(() => {\n    let alive = True;\n    setLoading(true);\n    getUsers({ query, page, size: pageSize })\n      .then((res) => {\n        if (!alive) return;\n        setItems(res.items || []);\n        setTotal(res.total || 0);\n        setError(null);\n      })\n      .catch((e) => setError(e?.message || \"Failed to load users\"))\n      .finally(() => setLoading(false));\n    return () => { alive = False; };\n  }, [query, page]);\n\n  const totalPages = Math.max(1, Math.ceil(total / pageSize));\n\n  const onToggle = async (id: string) => {\n    setLoading(true);\n    try {\n      await toggleUserSubscription(id);\n      // refetch\n      const res = await getUsers({ query, page, size: pageSize });\n      setItems(res.items || []);\n      setTotal(res.total || 0);\n    } catch (e: any) {\n      setError(e?.message || \"Failed to update user\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onAdd = async () => {\n    const email = prompt(\"Enter email to add:\");\n    if (!email) return;\n    setLoading(true);\n    try {\n      await addUser({ email });\n      setPage(1);\n      setQuery(\"\");\n      const res = await getUsers({ query: \"\", page: 1, size: pageSize });\n      setItems(res.items || []);\n      setTotal(res.total || 0);\n    } catch (e: any) {\n      setError(e?.message || \"Failed to add user\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const pageItems = items; // server-paginated\n\n  return (\n    <div className=\"space-y-4\">\n      <Card>\n        <CardHeader title=\"User Directory\" action={<Button onClick={onAdd} disabled={loading}>Add User</Button>} />\n        <CardContent>\n          <div className=\"flex items-center gap-3 mb-4\">\n            <div className=\"relative w-full max-w-md\">\n              <Search className=\"h-4 w-4 absolute left-3 top-1/2 -translate-y-1/2 text-gray-400\" />\n              <Input value={query} onChange={setQuery} placeholder=\"Search by email\" />\n            </div>\n          </div>\n\n          <div className=\"overflow-x-auto rounded-xl border border-gray-200 dark:border-gray-700\">\n            <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n              <thead className=\"bg-gray-50 dark:bg-gray-900\">\n                <tr>\n                  <th className=\"px-4 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-300\">Email</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-300\">Status</th>\n                  <th className=\"px-4 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-300\">Actions</th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n                {loading ? (\n                  <tr><td className=\"px-4 py-6 text-sm text-gray-500 dark:text-gray-400\" colSpan={3}>Loading\u2026</td></tr>\n                ) : pageItems.length > 0 ? pageItems.map((u) => (\n                  <tr key={u.id}>\n                    <td className=\"px-4 py-3 text-sm text-gray-900 dark:text-gray-100\">{u.email}</td>\n                    <td className=\"px-4 py-3\">\n                      <span className={`inline-flex items-center rounded-full px-2 py-0.5 text-xs font-medium ${\n                        u.status === \"active\"\n                          ? \"bg-emerald-50 text-emerald-700 dark:bg-emerald-900/30 dark:text-emerald-300\"\n                          : \"bg-rose-50 text-rose-700 dark:bg-rose-900/30 dark:text-rose-300\"\n                      }`}>\n                        {u.status}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-3 text-right\">\n                      <Button variant=\"outline\" size=\"sm\" onClick={() => onToggle(u.id)} disabled={loading}>\n                        {u.status === \"active\" ? \"Remove from subscription\" : \"Re-activate\"}\n                      </Button>\n                    </td>\n                  </tr>\n                )) : (\n                  <tr><td className=\"px-4 py-6 text-sm text-gray-500 dark:text-gray-400\" colSpan={3}>No users match the search.</td></tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n\n          {/* Pagination */}\n          <div className=\"flex items-center justify-between mt-4\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-300\">Showing {pageItems.length} of {total}</p>\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={() => setPage(1)} disabled={page === 1 || loading}>First</Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={() => setPage((p) => Math.max(1, p - 1))} disabled={page === 1 || loading}>Prev</Button>\n              <span className=\"text-sm text-gray-700 dark:text-gray-200\">Page {page} / {Math.max(1, Math.ceil(total / pageSize))}</span>\n              <Button variant=\"outline\" size=\"sm\" onClick={() => setPage((p) => p + 1)} disabled={page >= Math.ceil(total / pageSize) || loading}>Next</Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={() => setPage(Math.ceil(total / pageSize))} disabled={page >= Math.ceil(total / pageSize) || loading}>Last</Button>\n            </div>\n          </div>\n          {error && <div className=\"text-sm text-rose-600 dark:text-rose-400 mt-2\">{error}</div>}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\n// ---- Newsletter (real data) -----------------------------------------------\nconst NewsletterPage: React.FC = () => {\n  const [subject, setSubject] = useState(\"\");\n  const [preheader, setPreheader] = useState(\"\");\n  const [body, setBody] = useState(\"<h1>New content is live</h1><p>We just published fresh coaching modules. Dive in.</p>\");\n  const [sending, setSending] = useState(false);\n  const previewHtml = `<!doctype html><html><head><meta charset='utf-8'><meta name='viewport' content='width=device-width,initial-scale=1'>\n    <style>body{font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu;line-height:1.6;margin:0;padding:24px;background:#f9fafb;color:#111827} .card{background:#ffffff;border-radius:16px;padding:24px;border:1px solid #e5e7eb} .footer{font-size:12px;color:#6b7280;margin-top:24px}</style>\n  </head><body>\n    <div class='card'>\n      <div style='color:#6b7280;font-size:12px'>${preheader || \"Preheader goes here\"}</div>\n      <h1 style='margin:8px 0 16px'>${subject || \"Subject preview\"}</h1>\n      <div>${body}</div>\n      <div class='footer'>You received this because you subscribed to AI Coaching updates. <a href='#'>Unsubscribe</a></div>\n    </div>\n  </body></html>`;\n\n  const downloadPreview = () => {\n    const blob = new Blob([previewHtml], { type: \"text/html\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"newsletter_preview.html\";\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const onSendTest = async () => {\n    const to = prompt(\"Send test to (comma-separated emails):\");\n    if (!to) return;\n    setSending(true);\n    try {\n      await sendNewsletterTest({ to: to.split(\",\").map(s => s.trim()), subject, preheader, html: body });\n      alert(\"Test sent (if your backend is wired).\");\n    } catch (e: any) {\n      alert(e?.message || \"Failed to send test\");\n    } finally {\n      setSending(false);\n    }\n  };\n\n  const onSend = async () => {\n    setSending(True);\n    try {\n      await sendNewsletter({ subject, preheader, html: body });\n      alert(\"Newsletter send triggered.\");\n    } catch (e: any) {\n      alert(e?.message || \"Failed to send\");\n    } finally {\n      setSending(False);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n        <Card>\n          <CardHeader title=\"Compose Newsletter\" />\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm mb-1 text-gray-700 dark:text-gray-200\">Subject</label>\n              <Input value={subject} onChange={setSubject} placeholder=\"Write an engaging subject\" />\n            </div>\n            <div>\n              <label className=\"block text-sm mb-1 text-gray-700 dark:text-gray-200\">Preheader</label>\n              <Input value={preheader} onChange={setPreheader} placeholder=\"Short teaser shown in inbox\" />\n            </div>\n            <div>\n              <label className=\"block text-sm mb-1 text-gray-700 dark:text-gray-200\">HTML Body</label>\n              <Textarea value={body} onChange={setBody} rows={12} />\n            </div>\n            <div className=\"flex gap-2\">\n              <Button onClick={downloadPreview}>Download HTML Preview</Button>\n              <Button variant=\"outline\" onClick={onSendTest} disabled={sending}>Send Test</Button>\n              <Button variant=\"outline\" onClick={onSend} disabled={sending}>Schedule / Send</Button>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader title=\"Preview\" />\n          <CardContent>\n            <iframe title=\"preview\" className=\"w-full h-[600px] rounded-xl border border-gray-200 dark:border-gray-700 bg-white\" srcDoc={previewHtml} />\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\n// ---- App Shell ------------------------------------------------------------\n\ntype PageKey = \"dashboard\" | \"users\" | \"newsletter\";\n\nexport default function AdminPanel() {\n  const { dark, setDark } = useTheme();\n  const [page, setPage] = useState<PageKey>(\"dashboard\");\n  const [adminEmail, setAdminEmail] = useState(\"\");\n\n  useEffect(() => {\n    getAdminMe().then((me) => setAdminEmail(me?.email || \"admin@example.com\")).catch(() => setAdminEmail(\"admin@example.com\"));\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <Header adminEmail={adminEmail} currentPage={page} onNavigate={setPage} dark={dark} setDark={setDark} />\n\n      <main className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-6\">\n        {page === \"dashboard\" && <Dashboard />}\n        {page === \"users\" && <UsersPage />}\n        {page === \"newsletter\" && <NewsletterPage />}\n      </main>\n\n      <footer className=\"border-t border-gray-200 dark:border-gray-800\">\n        <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-6 text-xs text-gray-500 dark:text-gray-400\">\n          \u00a9 {new Date().getFullYear()} AI Coaching Admin.\n        </div>\n      </footer>\n    </div>\n  );\n}\n\n// ---- Skeleton helpers -----------------------------------------------------\nconst SkeletonLine = () => (\n  <div className=\"h-8 w-28 bg-gray-200 dark:bg-gray-700 rounded-md animate-pulse\" />\n);\n\nconst SkeletonChart = () => (\n  <div className=\"h-full w-full bg-gray-100 dark:bg-gray-800 rounded-xl animate-pulse\" />\n);\n\n// Tailwind notes (project-wide):\n// - Ensure tailwind.config.js has: darkMode: 'class', and content globs include this folder.\n// - Primary neutrals: bg gray-50/900, cards white/gray-800, borders gray-200/700.\n"
    },
    {
      "path": "src/admin/services/adminApi.ts",
      "action": "write",
      "content": "// Lightweight API adapter to your existing backend endpoints.\n// Fill/adjust BASE_URL and endpoint paths to match your project.\n// All functions return JSON and throw on non-2xx.\n\nexport type MetricsResponse = {\n  monthly: Array<{ month: string; total: number; newlyAdded: number }>;\n  totals?: { current: number; previous: number };\n};\n\nexport type UsersResponse = {\n  items: Array<{ id: string; email: string; status: \"active\" | \"canceled\" }>;\n  total: number;\n};\n\nconst BASE_URL = process.env.ADMIN_API_BASE_URL || \"\"; // leave empty to use same origin\n\nasync function api<T>(path: string, init?: RequestInit): Promise<T> {\n  const res = await fetch(`${BASE_URL}${path}`, {\n    credentials: \"include\",\n    headers: { \"Content-Type\": \"application/json\", ...(init?.headers || {}) },\n    ...init,\n  });\n  if (!res.ok) {\n    const text = await res.text();\n    throw new Error(`${res.status} ${res.statusText}: ${text}`);\n  }\n  return res.json() as Promise<T>;\n}\n\n// ---- Admin identity --------------------------------------------------------\nexport async function getAdminMe(): Promise<{ email: string } | null> {\n  try {\n    return await api<{ email: string }>(\"/api/admin/me\");\n  } catch {\n    return null;\n  }\n}\n\n// ---- Metrics ---------------------------------------------------------------\nexport function getMetrics(): Promise<MetricsResponse> {\n  // Example expected server response shape (adjust server accordingly):\n  // { monthly: [{month:'2025-01', total:120, newlyAdded:20}, ...] }\n  return api<MetricsResponse>(\"/api/metrics/subscriptions\");\n}\n\n// ---- Users -----------------------------------------------------------------\nexport function getUsers(params: { query: string; page: number; size: number }): Promise<UsersResponse> {\n  const q = new URLSearchParams({ query: params.query, page: String(params.page), size: String(params.size) }).toString();\n  return api<UsersResponse>(`/api/users?${q}`);\n}\n\nexport function addUser(body: { email: string }) {\n  return api(\"/api/users\", { method: \"POST\", body: JSON.stringify(body) });\n}\n\nexport function toggleUserSubscription(id: string) {\n  // Implement server to toggle between active/canceled.\n  return api(`/api/users/${id}/subscription`, { method: \"PATCH\" });\n}\n\n// ---- Newsletter ------------------------------------------------------------\nexport function sendNewsletterTest(body: { to: string[]; subject: string; preheader?: string; html: string }) {\n  return api(\"/api/newsletters/test\", { method: \"POST\", body: JSON.stringify(body) });\n}\n\nexport function sendNewsletter(body: { subject: string; preheader?: string; html: string; scheduleIso?: string }) {\n  return api(\"/api/newsletters/send\", { method: \"POST\", body: JSON.stringify(body) });\n}\n"
    },
    {
      "path": "src/admin/index.ts",
      "action": "write",
      "content": "export { default as AdminPanel } from './components/AdminPanel';\n"
    },
    {
      "path": "src/types/admin.d.ts",
      "action": "write",
      "content": "export {}; // reserved for future shared admin types\n"
    }
  ],
  "env": {
    "ADMIN_API_BASE_URL": "Optional base URL override for admin API; leave empty to use same origin."
  },
  "acceptanceCriteria": [
    "Navigating to /admin renders the three pages with header, theme toggle, admin email, and footer.",
    "Dashboard charts load from real metrics; MoM % and New Subs reflect last month\u2019s values from API.",
    "Users table lists 10 per page, filters by email, and toggles subscription status using adapter calls.",
    "Newsletter page can send a test and send (or schedule) via the provided endpoints.",
    "UI matches the reference spacing/typography/colors in both light and dark modes.",
    "TypeScript builds cleanly with no errors or implicit any warnings."
  ]
}