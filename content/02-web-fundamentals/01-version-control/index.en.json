{
  "title": "2.1 Version Control",
  "description": "From basics to advanced, learn the meaning, workflow, and best practices of version control using Git & GitHub. Content maintains the original structured style while enhancing explanations and clarity.",
  "slug": "version-control",
  "category": "web-fundamentals", 
  "lastModified": "2025-09-08T00:00:00.000Z",
  "blocks": [
    {
      "type": "heading",
      "level": 1,
      "content": "2.1 Version Control"
    },

    {
      "type": "line-break"
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Understanding in One Sentence",
      "content": "Version control is like **Google Docs revision history**: you can compare, view, or even restore any previous modification at any time. The difference is that Git is designed specifically for code projects with more comprehensive features, supporting branching, merging, and multi-person collaboration."
    },

    {
      "type": "line-break"
    },
    {
      "type": "horizontal-rule"
    },
    {
      "type": "heading",
      "level": 2,
      "content": "What is Version Control and Why is it Important?"
    },
    {
      "type": "line-break"
    },
    {
      "type": "text",
      "content": "Version Control is a method used to record the state of project files at different times. Through a Version Control System (VCS), developers can track modification history, check differences, quickly rollback when errors occur, and even switch between different versions."
    },
    {
      "type": "line-break"
    },
    {
      "type": "list",
      "listType": "unordered",
      "items": [
        "**Traceability**: Every modification is automatically recorded, including time, content, and author.",
        "**Risk Reduction**: If new features break, you can instantly return to a stable state, avoiding major losses.",
        "**Multi-person Collaboration**: Team members can develop simultaneously, with the system helping resolve conflicts.",
        "**Multi-version Management**: Supports branches, allowing parallel development of new features while maintaining old versions.",
        "**Project Workflow Foundation**: CI/CD, automated testing, and Code Review are all built on version control."
      ]
    },
    {
      "type": "line-break"
    },
    {
      "type": "horizontal-rule"
    },
    {
      "type": "line-break"
    },
    {
      "type": "heading",
      "level": 2,
      "content": "Git vs GitHub — Understanding Their Roles"
    },
    {
      "type": "heading",
      "level": 3,
      "content": "Core Concepts"
    },
    {
      "type": "line-break"
    },
    {
      "type": "definition-list",
      "definitions": [
        {
          "term": "**Git**",
          "definition": "A distributed version control system. Everyone's computer has the complete history, no need to depend on a central server. Suitable for offline work with high efficiency."
        },
        {
          "term": "**GitHub**",
          "definition": "A cloud platform based on Git. Besides hosting code, it also provides Pull Requests, Issue management, Actions automation, facilitating team collaboration and open source community interaction."
        },
        {
          "term": "**Repo (Repository)**",
          "definition": "The home of a project, where all version history is stored. Can be a local repo or placed on GitHub remotely."
        },
        {
          "term": "**Commit**",
          "definition": "A saved state with a message, recording a set of file modifications. Like a save point in a game."
        },
        {
          "term": "**Branch**",
          "definition": "Creating a parallel timeline, allowing developers to experiment or add features without affecting the main line."
        }
      ]
    },
    {
      "type": "line-break"
    },
    {
      "type": "callout",
      "variant": "success",
      "title": "Quick Tip",
      "content": "**Git = Tool (local operations)**; **GitHub = Platform (cloud collaboration)**"
    },
    {
      "type": "line-break"
    },
    {
      "type": "horizontal-rule"
    },
    {
      "type": "line-break"
    },
    {
      "type": "heading",
      "level": 2,
      "content": "Minimal Workflow — Beginner Version"
    },
    {
      "type": "text",
      "content": "Here's the simplest workflow: create a new project → make changes → commit → upload to GitHub. Just follow step by step."
    },
    {
      "type": "line-break"
    },
    {
      "type": "terminal",
      "title": "Workflow Example",
      "content": "$ mkdir my-app && cd my-app\n$ git init                         # Initialize repository\n$ echo \"hello\" > README.md        # Create file\n$ git add README.md                # Stage file\n$ git commit -m \"feat: init\"      # Create commit\n\n# Push to GitHub (need to create repo on GitHub first)\n$ git branch -M main\n$ git remote add origin https://github.com/<user>/my-app.git\n$ git push -u origin main"
    },
    {
      "type": "line-break"
    },
    {
      "type": "callout",
      "variant": "info",
      "title": "Reminder",
      "content": "If push fails, check:\n1) Are you logged in?\n2) Is the remote URL correct?\n3) Does the remote repo already have content?\n\nCommon solution: `git pull --rebase origin main` then push."
    },
    {
      "type": "line-break"
    },
    {
      "type": "horizontal-rule"
    },
    {
      "type": "line-break"
    },
    {
      "type": "heading",
      "level": 2,
      "content": "Common Commands Cheat Sheet"
    },
    {
      "type": "list",
      "listType": "ordered",
      "items": [
        "`git status` → Check current change status",
        "`git add .` / `git add <file>` → Stage changes",
        "`git commit -m \"message\"` → Create commit",
        "`git log --oneline --graph --decorate` → View history concisely",
        "`git branch` / `git switch -c feature/x` → Create or switch branch",
        "`git merge <branch>` / `git rebase <branch>` → Merge or reorganize history",
        "`git pull` / `git push` → Sync with remote"
      ]
    },
    {
      "type": "line-break"
    },
    {
      "type": "heading",
      "level": 3,
      "content": "gitignore"
    },
    {
      "type": "text",
      "content": "The purpose of .gitignore is to avoid redundancy, protect secrets, and keep the repo lightweight. Only source code, configuration files, and necessary documentation should be tracked by Git."
    },
    {
      "type": "list",
      "listType": "unordered",
      "items": [
        "`node_modules/`: Folder for dependencies, can be hundreds of MB. Content can be rebuilt through package.json + npm install, no need in repo.",
        "`.env`: Environment variables file, usually contains passwords, API keys, database connection strings, etc. Uploading creates security risks.",
        "`.DS_Store`: macOS automatically generated file, only used by Finder to record folder display settings, meaningless for projects.",
        "`dist/`: Compiled or packaged artifacts, like static files built from frontend. Usually generated automatically by CI/CD process, no need in repo.",
        "`coverage/`: Test coverage tool generated reports, temporary files, no need to track.",
        "`*.log`: System or application runtime generated logs, usually large content that updates frequently, no version control value."
      ]
    },
    {
      "type": "line-break"
    },
    {
      "type": "code",
      "language": "gitignore", 
      "title": ".gitignore Example (Node.js Project)",
      "content": "node_modules/\n.env\n.DS_Store\ndist/\ncoverage/\n*.log\n"
    },
    {
      "type": "line-break"
    },
    {
      "type": "horizontal-rule"
    },
    {
      "type": "line-break"
    },

    {
      "type": "heading",
      "level": 2,
      "content": "Summary"
    },
    {
      "type": "callout",
      "variant": "success",
      "title": "Summary",
      "content": "The value of version control = **Safe rollback + Multi-person collaboration + Clear history + Efficient workflow**. Used well, Git and GitHub are your safety vault, team bridge, and work logbook."
    },
    {
      "type": "heading",
      "level": 3,
      "content": "Try It Out"
    },
    {
      "type": "task-list",
      "items": [
          { "content": "Create a local Git repo and try making one commit", "completed": false },
          { "content": "Upload to GitHub and confirm remote sync success", "completed": false },
          { "content": "Add a branch feature/hello, then merge back to main", "completed": false }
      ]
    }
  ]
}