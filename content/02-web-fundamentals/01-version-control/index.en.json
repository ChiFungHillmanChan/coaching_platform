{
  "title": "2.1 Version Control",
  "description": "From basics to best practices, explaining the meaning, workflow, and advantages of version control through Git and GitHub. The structure is preserved while enhancing clarity and adding explanations.",
  "slug": "version-control",
  "category": "web-fundamentals",
  "lastModified": "2025-09-08T00:00:00.000Z",
  "blocks": [
    {
      "type": "heading",
      "level": 1,
      "content": "2.1 Version Control"
    },

    { "type": "line-break" },
    {
      "type": "callout",
      "variant": "info",
      "title": "One-Sentence Summary",
      "content": "Version control is like **Google Docs history**: you can compare, view, or restore any change at any time. The difference is that Git is built for code projects, with more complete features including branching, merging, and team collaboration."
    },

    { "type": "line-break" }, { "type": "horizontal-rule" },
    {
      "type": "heading",
      "level": 2,
      "content": "What Is Version Control and Why Does It Matter?"
    },
    { "type": "line-break" },
    {
      "type": "text",
      "content": "Version control (VCS) records the state of project files at different points in time. With a Version Control System, developers can track history, check differences, roll back when errors occur, and switch between versions."
    },
    { "type": "line-break" },
    {
      "type": "list",
      "listType": "unordered",
      "items": [
        "**Traceability**: Every change is recorded automatically, including time, content, and author.",
        "**Reduced Risk**: If a new feature fails, you can quickly return to a stable state.",
        "**Collaboration**: Team members can work in parallel, with the system helping to resolve conflicts.",
        "**Multi-Version Management**: Supports branches, enabling new features to be developed while maintaining older versions.",
        "**Foundation for Workflow**: CI/CD, automated testing, and code reviews all build on version control."
      ]
    },

    { "type": "line-break" }, { "type": "horizontal-rule" }, { "type": "line-break" },

    {
      "type": "heading",
      "level": 2,
      "content": "Git vs GitHub — Know the Difference"
    },
    {
      "type": "heading",
      "level": 3,
      "content": "Core Concepts"
    },
    { "type": "line-break" },
    {
      "type": "definition-list",
      "definitions": [
        {
          "term": "**Git**",
          "definition": "A distributed version control system. Each developer’s computer holds the full history, without relying on a central server. Works offline and is efficient."
        },
        {
          "term": "**GitHub**",
          "definition": "A cloud platform built on Git. Beyond hosting code, it provides pull requests, issue tracking, and automation with Actions, supporting team collaboration and open-source communities."
        },
        {
          "term": "**Repo (Repository)**",
          "definition": "A container for a project, storing its entire version history. Can be local or remote (e.g., on GitHub)."
        },
        {
          "term": "**Commit**",
          "definition": "A snapshot with a message, recording a set of file changes. Like a save point in a game."
        },
        {
          "term": "**Branch**",
          "definition": "A parallel line of development, allowing features or experiments without affecting the main line."
        }
      ]
    },
    { "type": "line-break" },
    {
      "type": "callout",
      "variant": "success",
      "title": "Tip",
      "content": "**Git = Tool (local operations)**; **GitHub = Platform (cloud collaboration)**"
    },

    { "type": "line-break" }, { "type": "horizontal-rule" }, { "type": "line-break" },

    {
      "type": "heading",
      "level": 2,
      "content": "Minimal Workflow — Beginner’s Guide"
    },
    {
      "type": "text",
      "content": "Here’s the most basic workflow: create a project → make changes → commit → push to GitHub. Just follow the steps."
    },
    { "type": "line-break" },
    {
      "type": "terminal",
      "title": "Workflow Example",
      "content": "$ mkdir my-app && cd my-app\n$ git init                         # Initialize repo\n$ echo \"hello\" > README.md        # Create file\n$ git add README.md                # Stage file\n$ git commit -m \"feat: init\"      # Commit\n\n# Push to GitHub (repo must exist on GitHub first)\n$ git branch -M main\n$ git remote add origin https://github.com/<user>/my-app.git\n$ git push -u origin main"
    },
    { "type": "line-break" },
    {
      "type": "callout",
      "variant": "info",
      "title": "Reminder",
      "content": "If push fails, check:\n1) Are you logged in?\n2) Is the remote URL correct?\n3) Does the remote repo already contain content?\n\nCommon fix: run `git pull --rebase origin main` before pushing."
    },

    { "type": "line-break" }, { "type": "horizontal-rule" }, { "type": "line-break" },

    {
      "type": "heading",
      "level": 2,
      "content": "Common Commands Cheat Sheet"
    },
    {
      "type": "list",
      "listType": "ordered",
      "items": [
        "`git status` → View current changes",
        "`git add .` / `git add <file>` → Stage changes",
        "`git commit -m \"message\"` → Commit changes",
        "`git log --oneline --graph --decorate` → View history concisely",
        "`git branch` / `git switch -c feature/x` → Create or switch branches",
        "`git merge <branch>` / `git rebase <branch>` → Merge or rebase",
        "`git pull` / `git push` → Sync with remote"
      ]
    },

    { "type": "line-break" },
    {
      "type": "heading",
      "level": 3,
      "content": ".gitignore"
    },
    {
      "type": "text",
      "content": "The purpose of .gitignore is to avoid redundancy, protect secrets, and keep the repo lightweight. Only source code, configuration, and necessary files should be tracked."
    },
    {
      "type": "list",
      "listType": "unordered",
      "items": [
        "`node_modules/`: Dependency folder, often hundreds of MB. Can be rebuilt via package.json + npm install, no need to track.",
        "`.env`: Environment variables file, usually containing passwords, API keys, and database connection strings. Uploading it creates security risks.",
        "`.DS_Store`: Auto-generated by macOS, stores folder display settings. No value to the project.",
        "`dist/`: Build or compiled artifacts, like frontend static files. Usually generated by CI/CD, no need to track.",
        "`coverage/`: Test coverage reports, temporary files not worth tracking.",
        "`*.log`: Logs generated by systems or apps, large and constantly changing. No version control value."
      ]
    },
    { "type": "line-break" },
    {
      "type": "code",
      "language": "gitignore",
      "title": ".gitignore Example (Node.js Project)",
      "content": "node_modules/\n.env\n.DS_Store\ndist/\ncoverage/\n*.log\n"
    },

    { "type": "line-break" }, { "type": "horizontal-rule" }, { "type": "line-break" },

    {
      "type": "heading",
      "level": 2,
      "content": "Summary"
    },
    {
      "type": "callout",
      "variant": "success",
      "title": "Summary",
      "content": "The value of version control = **safe rollback + team collaboration + clear history + efficient workflow**. Used properly, Git and GitHub become your safe, your team bridge, and your project journal."
    },
    {
      "type": "heading",
      "level": 3,
      "content": "Try It"
    },
    {
      "type": "task-list",
      "items": [
        { "content": "Create a local Git repo and make one commit", "completed": false },
        { "content": "Push it to GitHub and confirm remote sync", "completed": false },
        { "content": "Create a branch feature/hello and merge it back into main", "completed": false }
      ]
    }
  ]
}
