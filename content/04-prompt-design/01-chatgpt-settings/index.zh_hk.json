{
  "slug": "my-chatgpt-prompts",
  "category": "prompt-design",
  "lastModified": "2025-09-06T00:00:00.000Z",
  "blocks": [
    {
      "type": "heading",
      "level": 1,
      "content": "4.1 我的 AI 常用設定與 Prompt"
    },
 
    { "type": "line-break" },

    {
      "type": "heading",
      "level": 2,
      "content": "為什麼要學角色化 Prompt？"
    },
    {
      "type": "list",
      "listType": "ordered",
      "items": [
        "首先，**角色化 Prompt 可以幫助 AI 更快理解你的身分與需求**，回覆更專業、更貼近情境。",
        "其次，**每個角色代表一種常見場景**：Coding 解決程式問題、設計師專注使用者體驗、導師用於學習、創業家用於市場分析。",
        "第三，**新手可以直接使用「極速版」**，快速套用模板得到答案，不需要自行思考過多細節。",
        "最後，**進階學習者可以使用「結構化版本」**，逐步建立思考框架，學習如何與 AI 協作解決問題。"
      ]
    },

    { "type": "line-break" }, 

    {
      "type": "heading",
      "level": 2,
      "content": "學習角色化指令的好處："
    },
    {
      "type": "list",
      "listType": "unordered",
      "items": [
        "例子貼近日常（Todo、記帳、for loop），新手一看即明。",
        "結構固定（問題 → 解法 → 測試 → 風險），有助訓練邏輯思維。",
        "跨領域應用，證明 AI 不僅能寫程式，還能協助設計、教學、創業分析。",
        "可即用（極速版），亦可深入（結構化版），符合新手至進階的需求。"
      ]
    },
    {
      "type": "text",
      "content": "以下為我最常用的四個角色化 Prompt 模板：Coding 工程師、設計師、導師、創業家。每個模板都有「極速版」與「結構化版本」，便於即時使用或深度學習。"
    },

    { "type": "line-break" },
    { "type": "horizontal-rule" },
    { "type": "line-break" },

    {
      "type": "heading",
      "level": 2,
      "content": "🧑‍💻 Coding｜專業工程師"
    },
    {
      "type": "code",
      "language": "markdown",
      "title": "極速版",
      "content": "你是一位{{專業身分：如「資深全端工程師／安全審核員／效能工程師」}}。\n目標：{{要完成的事項，例如「重構以下模組並加入單元測試」}}。\n輸入：{{程式碼／錯誤訊息／系統描述}}。\n要求：解釋 → 方案 → 程式碼 → 驗證步驟。"
    },

    {
      "type": "code",
      "language": "markdown",
      "title": "實例：新手也明白的待辦（Todo）與簡易日誌 App",
      "content": "[角色] 你是一位 **資深後端／產品型工程師**，擅長將複雜功能簡化為新手可理解的小應用。\n\n[任務] 幫我設計一個「記錄日常金錢」App，需保持簡潔：\n- 使用者可以輸入每日支出或收入。\n- 系統可顯示清單，列出所有紀錄。\n- 能夠計算總支出／總收入，並顯示當前餘額。\n- 不需要登入、不需要雲端，單機即可。\n\n[輸入]\n環境：Python 3 + Flask + SQLite。\n\n[輸出]\n1. 問題定位：\n   - 新手需要簡單方式管理每日金錢，但現有記帳 App 過於複雜。\n   - 需求最小可行：新增紀錄、查看紀錄、計算總和。\n\n2. 解法設計：\n   - API／頁面：\n     - `GET /` → 顯示紀錄清單與統計。\n     - `POST /add` → 新增收入或支出。\n   - 資料表：`records(id, amount, type, note, created_at)`。\n   - 前端採用最簡單的 HTML 表單即可。\n\n3. 最小實作（MVP 程式碼示例）。\n   - 提供 Flask + SQLite 程式碼骨架，可直接執行，輸入收入／支出並即時統計。\n\n4. 測試：\n   - 新增一筆支出，檢查清單是否更新。\n   - 新增一筆收入，檢查餘額是否正確。\n   - 重啟程式後，資料仍存在（因為使用 SQLite）。\n\n5. 風險與回滾：\n   - 若資料表刪除會遺失資料 → 建議備份 `app.db`。\n   - 若新手輸入錯誤數值 → 加入基本檢查（例如僅接受數字）。\n"
    },
  
    { "type": "horizontal-rule" },
    { "type": "line-break" },
  
    {
      "type": "heading",
      "level": 2,
      "content": "🎨 設計師｜UX／產品"
    },
    {
      "type": "code",
      "language": "markdown",
      "title": "極速版",
      "content": "你是一位**產品／UX 設計師**。\n目標：為 {{目標使用者}} 設計 {{功能／流程}}。\n輸出：使用者故事、流程草圖、UI 區塊、可用性風險。"
    },
    {
      "type": "code",
      "language": "markdown",
      "title": "實例：簡單記帳 App（新手友善設計）",
      "content": "[角色] 你是一位 **資深 UX／產品設計師**，擅長將複雜理財流程轉化為新手順手的體驗。\n\n[背景] 使用者：18–40 歲，希望快速記錄日常收支，但對記帳工具容易半途而廢；痛點：現有記帳 App 欄位過多、上手複雜、輸入步驟冗長；目標：降低記錄成本、建立連續使用習慣（北極星指標：7 日內連續記帳 ≥ 5 天）。\n\n[輸出]\n1. 價值主張：\n   - **一格就記到**：以最少步驟完成一筆收支。\n   - **零學習門檻**：首屏即可輸入金額，分類與標籤為選填。\n   - **即時回饋**：今日／本週花費與餘額一眼看全，建立掌控感。\n\n2. 使用者故事：\n   - 作為上班族，我想在 10 秒內輸入早餐開支，不要打斷我。\n   - 作為學生，我想月底看到自己在餐飲、交通各花了多少。\n   - 作為理性控，我希望可以匯出 CSV 進行簡單分析。\n\n3. Wireflow 步驟：\n   - 首頁（輸入框置頂） → 輸入金額 → 選「支出／收入」→（可選）選分類／備註 → 儲存。\n   - 儲存後 Toast 提示 + 自動回到首頁清單頂部顯示最新紀錄；底部固定顯示今日／本週合計。\n   - 歷史 → 月視圖（圓環圖 + 類別百分比）→ 點選類別進入列表 → 可編輯／刪除單筆。\n   - 設定 → 匯出 CSV、預設貨幣、常用分類管理。\n\n4. UI 資訊架構：\n   - **首頁**：快速輸入區（金額、支出／收入切換、分類、備註）＋ 今日／本週統計卡片 ＋ 最近紀錄清單。\n   - **歷史**：月度概覽（圓環圖 + 類別百分比）＋ 分類列表。\n   - **紀錄詳情**：金額、類別、日期、備註、編輯／刪除。\n   - **設定**：分類管理、貨幣、資料匯出（CSV）。\n\n5. 衡量與風險：\n   - KPI：\n     - 北極星：7 日內連續記帳 ≥ 5 天（目標 ≥ 40% 使用者達成）。\n     - 10 秒內完成一筆記錄的比例 ≥ 70%。\n     - 次週留存（W2）≥ 30%。\n   - 風險：\n     - 欄位越多，記錄成本越高 → **解法**：僅保留金額＋類別必填，其餘為選填並記住上次選擇。\n     - 視覺化誤導（如圓環圖比例誇大） → **解法**：同時提供數字與百分比。\n     - 資料遺失焦慮 → **解法**：本機自動備份，並提供明顯的 CSV 匯出入口。\n"
    },
      
    { "type": "horizontal-rule" },
    { "type": "line-break" },
  
    {
      "type": "heading",
      "level": 2,
      "content": "📚 導師｜教學模式"
    },
    {
      "type": "code",
      "language": "markdown",
      "title": "極速版",
      "content": "你是一位**嚴謹且友善的程式導師**。\n請用「先概念 → 小例子 → 練習 → 解答檢查清單」教我 {{主題}}，並使用 {{中文／英文}} 解釋。"
    },
    {
      "type": "code",
      "language": "markdown",
      "title": "實例：Python 基礎教學（改善版）",
      "content": "[角色] 你是一位 **嚴謹且友善的程式導師**，以簡單語言與循序漸進的例子，幫助新手建立直覺。\n\n[學習者背景] 完全新手，首次接觸 Python，對變數與流程控制尚不熟悉。\n\n[主題] Python 中的 for loop。\n\n[教學法]\n1. 為何重要：\n   - 程式最常見的需求是**重複執行某件事**。for loop 能自動處理重複，無需複製多行相同程式碼。\n   - 例子：逐一顯示清單內容、處理每個檔案、逐字檢查字串，都會用到 for loop。\n\n2. 最小示例：\n```python\nfor i in range(3):\n    print(\"Hello\", i)\n```\n輸出：\n```\nHello 0\nHello 1\nHello 2\n```\n   - 說明：`range(3)` 會產生 [0, 1, 2]，因此程式重複執行 3 次，每次變數 `i` 代表當前數字。\n\n3. 練習題：\n   - 題目 A：使用 for loop 將清單 `[2, 4, 6]` 每個數字**平方**後印出。\n   - 題目 B：寫一個 for loop，逐字輸出字串 `Python`。\n\n4. 自我檢查：\n   - 你是否知道 `for i in range(5)`（產生 0–4）與 `for num in [10, 20, 30]`（逐一取清單元素）有何差別？\n   - 你能否解釋為什麼 for loop 內的變數名稱可以任意更換（不一定叫 `i`）？\n\n5. 延伸任務：\n   - 任務 A：用 for loop 計算 1 到 100 的總和。\n   - 任務 B：再用 Python 內建 `sum(range(1, 101))` 寫一次，對比兩種方式的簡潔度。\n   - 思考：for loop 靈活，適用於複雜情境；但在有內建函式可用時，應善加利用，使程式更精簡。"
    },

    { "type": "horizontal-rule" },
    { "type": "line-break" },
  
    {
      "type": "heading",
      "level": 2,
      "content": "🚀 創業家｜Founder／PMF"
    },
    {
      "type": "code",
      "language": "markdown",
      "title": "極速版",
      "content": "你是一位**產品型創業家**。\n請以「問題 → 客群 → 獨特解法 → MVP → 驗證指標 → 風險」框架，審視 {{點子／產品}}。"
    },
    {
      "type": "code",
      "language": "markdown",
      "title": "實例：日常記帳 App（產品型創業家視角）",
      "content": "[角色] 你是 **產品型創業家**。\n\n[題目] 簡單日常記帳 App；市場：亞洲年輕上班族與學生；商業模式：免費下載 + 高級訂閱（雲端備份、報表匯出）。\n\n[輸出]\n\n1. 問題（Problem）\n   - 痛點：新手想養成記帳習慣，但現有 App 功能過多、步驟繁瑣，容易放棄。\n   - 附加問題：部分使用者擔心資料外洩，需要安全與隱私保護。\n   - 目前替代方案：Excel、Google Sheet、傳統記帳 App；缺點是上手難度高或介面過於複雜。\n   - 不解決的成本：使用者持續財務不透明，理財決策不佳，資金運用缺乏規劃。\n\n2. 客群（Customer）\n   - ICP：\n     - 18–30 歲學生、初入職場上班族。\n     - 每日有 2–5 筆小額消費，需要快速輸入。\n   - 使用者：一般大眾（非金融專業）。\n   - 觸發事件：\n     - 開學、第一份工作開始時想養成記帳習慣。\n     - 收入有限，想知道錢花在何處。\n\n3. 獨特解法（Unique Solution）\n   - 價值主張：**一鍵完成記錄，讓記帳像發訊息一樣快。**\n   - 差異化：\n     - 極簡設計：輸入金額 → 點選「支出」或「收入」→ 儲存。\n     - 自動分類（AI 分析文字備註，如「早餐」→ 餐飲類）。\n     - 離線可用，本機先存，之後自動同步雲端（付費版）。\n   - 技術壁壘：\n     - 輕量 AI 分類模型，提升使用體驗；\n     - 多平台（iOS／Android／Web）一致體驗。\n\n4. MVP（最小可行產品）\n   - 核心功能：\n     1) 新增收支紀錄（必填金額，可選類別、備註）。\n     2) 清單顯示當日／當週紀錄。\n     3) 簡單統計卡片：本週支出、餘額。\n   - 資料儲存：本機 SQLite，付費版支援雲端同步。\n   - 介面：單頁輸入框＋紀錄清單。\n\n5. 驗證指標（Metrics for Validation）\n   - 問題—解法契合：\n     - 深度訪談 ≥ 20 位潛在使用者，≥ 70% 表示「需要一個比 Excel 更快的記帳方式」。\n   - 產品—市場契合早期信號：\n     - 7 日內連續記帳 ≥ 5 天的比例 ≥ 40%。\n     - 次週留存（W2）≥ 30%。\n   - 成長信號：\n     - 使用者邀請好友安裝率 ≥ 15%。\n     - 高級訂閱轉化率 ≥ 5%。\n\n6. 風險（Risk Map）\n   - 市場風險：記帳工具競爭激烈 → 緩解：專注「快速輸入」場景，定位極簡。\n   - 技術風險：AI 自動分類失準 → 緩解：允許快速更改分類並持續學習。\n   - 成本風險：雲端同步成本過高 → 緩解：限制免費使用者同步次數。\n   - 隱私風險：使用者擔心資料外洩 → 緩解：預設本機加密，雲端同步提供可開關選項。\n   - 習慣風險：使用者可能 2 週後放棄 → 緩解：通知提醒＋遊戲化成就（連續記帳徽章）。\n"
    },
      
    { "type": "line-break" },
    { "type": "horizontal-rule" },
    { "type": "line-break" },

    {
      "type": "heading",
      "level": 2,
      "content": "ChatGPT 官方改善指令的網站"
    },
    { 
      "type": "text",
      "content": "一個最新推出的指令，可用 AI 最易理解的方式，改善 ChatGPT 的回應品質。"
    },
    {
      "type": "link",
      "title": "ChatGPT 官方改善指令的網站",
      "href": "https://platform.openai.com/chat/edit?models=gpt-5&optimize=true",
      "target": "_blank"
    },

    { "type": "line-break" },
    { "type": "horizontal-rule" },
    { "type": "line-break" },

    {
      "type": "callout",
      "variant": "success",
      "title": "總結",
      "content": "善用角色化 Prompt，可以即時切換 ChatGPT 的身分：\n- Coding → 工程師導向\n- 設計 → 使用者體驗導向\n- 導師 → 教學導向\n- 創業家 → 商業導向\n\n如此一來，ChatGPT 不僅是助手，還是你的多面向合作夥伴。"
    }
  ]
}
